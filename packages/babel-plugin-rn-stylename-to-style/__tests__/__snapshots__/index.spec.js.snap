// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@startupjs/babel-plugin-rn-stylename-to-style "parseJson" option with default import: "parseJson" option with default import 1`] = `

import STYLES from './index.styl'
console.log(STYLES)
function Test () {
  return (
    <div styleName='root active'>
      <span styleName='title'>Title</span>
    </div>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _jsonCss from "./index.styl";
import { process as _processStyleName } from "@startupjs/babel-plugin-rn-stylename-to-style/process";
const STYLES = JSON.parse(_jsonCss);
console.log(STYLES);

function Test() {
  return (
    <div
      {..._processStyleName(
        "root active",
        STYLES,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {}
      )}
    >
      <span
        {..._processStyleName(
          "title",
          STYLES,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Title
      </span>
    </div>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style "parseJson" option. Used when we receive compiled css as a json string: "parseJson" option. Used when we receive compiled css as a json string 1`] = `

import './index.styl'
function Test () {
  return (
    <div styleName='root active'>
      <span styleName='title'>Title</span>
      <span styleName='description'>Description</span>
      <button styleName='submit disabled'>Submit</button>
    </div>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _jsonCss from "./index.styl";
import { process as _processStyleName } from "@startupjs/babel-plugin-rn-stylename-to-style/process";

const _css = JSON.parse(_jsonCss);

function Test() {
  return (
    <div
      {..._processStyleName(
        "root active",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {}
      )}
    >
      <span
        {..._processStyleName(
          "title",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Title
      </span>
      <span
        {..._processStyleName(
          "description",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Description
      </span>
      <button
        {..._processStyleName(
          "submit disabled",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Submit
      </button>
    </div>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style "useImport" option. Used for ESM.: "useImport" option. Used for ESM. 1`] = `

import './index.styl'
function Test () {
  return (
    <div styleName='root active'>
      <span styleName='title'>Title</span>
      <span styleName='description'>Description</span>
      <button styleName='submit disabled'>Submit</button>
    </div>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";
import { process as _processStyleName } from "@startupjs/babel-plugin-rn-stylename-to-style/process";

function Test() {
  return (
    <div
      {..._processStyleName(
        "root active",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {}
      )}
    >
      <span
        {..._processStyleName(
          "title",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Title
      </span>
      <span
        {..._processStyleName(
          "description",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Description
      </span>
      <button
        {..._processStyleName(
          "submit disabled",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Submit
      </button>
    </div>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style Arrays and objects: Arrays and objects 1`] = `

import './index.styl'
function Test ({ style, active, submit, disabled }) {
  const titleStyle = { color: 'red', fontWeight: 'bold' }
  return (
    <div style={style} styleName={['root', {active}]}>
      <span styleName={['title']} style={titleStyle}>Title</span>
      <span styleName={['description']} style={{ color: 'green' }}>Description</span>
      <button style={{ color: 'pink' }} styleName={{submit, disabled}}>Submit</button>
    </div>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({ style, active, submit, disabled }) {
  const titleStyle = {
    color: "red",
    fontWeight: "bold",
  };
  return (
    <div
      {..._processStyleName(
        [
          "root",
          {
            active,
          },
        ],
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: style,
        }
      )}
    >
      <span
        {..._processStyleName(
          ["title"],
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: titleStyle,
          }
        )}
      >
        Title
      </span>
      <span
        {..._processStyleName(
          ["description"],
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: {
              color: "green",
            },
          }
        )}
      >
        Description
      </span>
      <button
        {..._processStyleName(
          {
            submit,
            disabled,
          },
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: {
              color: "pink",
            },
          }
        )}
      >
        Submit
      </button>
    </div>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style DEPRECATED! With ::part() styles and deprecated *StyleName props: DEPRECATED! With ::part() styles and deprecated *StyleName props 1`] = `

import './index.styl'
function Test ({ style, active, submit, disabled, titleStyle }) {
  return (
    <Card style={style} styleName={['root', {active}]} titleStyleName={['title', {active}]} titleStyle={[titleStyle, { color: 'green' }]} title='container'>
      <Content styleName='text' style={{ color: 'red' }} footerStyleName='footer' footerStyle={{ color: 'blue' }} center title='text' />
    </Card>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({ style, active, submit, disabled, titleStyle }) {
  return (
    <Card
      titleStyle={[
        _processStyleName(
          [
            "title",
            {
              active,
            },
          ],
          _css
        ),
        [
          titleStyle,
          {
            color: "green",
          },
        ],
      ]}
      title="container"
      {..._processStyleName(
        [
          "root",
          {
            active,
          },
        ],
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: style,
        }
      )}
    >
      <Content
        footerStyle={[
          _processStyleName("footer", _css),
          {
            color: "blue",
          },
        ]}
        center
        title="text"
        {..._processStyleName(
          "text",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: {
              color: "red",
            },
          }
        )}
      />
    </Card>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style Puts compiled attribute to the end of attributes list: Puts compiled attribute to the end of attributes list 1`] = `

import './index.styl'
function Test ({ style, active, submit, disabled }) {
  return (
    <div style={style} styleName={['root', {active}]} title='container'>
      <span styleName='text' style={{ color: 'red' }} center title='text' />
    </div>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({ style, active, submit, disabled }) {
  return (
    <div
      title="container"
      {..._processStyleName(
        [
          "root",
          {
            active,
          },
        ],
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: style,
        }
      )}
    >
      <span
        center
        title="text"
        {..._processStyleName(
          "text",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: {
              color: "red",
            },
          }
        )}
      />
    </div>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style Regular string with existing style: Regular string with existing style 1`] = `

import './index.styl'
function Test ({ style }) {
  const titleStyle = { color: 'red', fontWeight: 'bold' }
  return (
    <div style={[style, { backgroundColor: 'black' }]} styleName='root active'>
      <span styleName='title' style={titleStyle}>Title</span>
      <span styleName='description' style={{ color: 'green' }}>Description</span>
      <button styleName='submit disabled'>Submit</button>
    </div>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({ style }) {
  const titleStyle = {
    color: "red",
    fontWeight: "bold",
  };
  return (
    <div
      {..._processStyleName(
        "root active",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: [
            style,
            {
              backgroundColor: "black",
            },
          ],
        }
      )}
    >
      <span
        {..._processStyleName(
          "title",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: titleStyle,
          }
        )}
      >
        Title
      </span>
      <span
        {..._processStyleName(
          "description",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: {
              color: "green",
            },
          }
        )}
      >
        Description
      </span>
      <button
        {..._processStyleName(
          "submit disabled",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Submit
      </button>
    </div>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style Regular string: Regular string 1`] = `

import './index.styl'
function Test () {
  return (
    <div styleName='root active'>
      <span styleName='title'>Title</span>
      <span styleName='description'>Description</span>
      <button styleName='submit disabled'>Submit</button>
    </div>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test() {
  return (
    <div
      {..._processStyleName(
        "root active",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {}
      )}
    >
      <span
        {..._processStyleName(
          "title",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Title
      </span>
      <span
        {..._processStyleName(
          "description",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Description
      </span>
      <button
        {..._processStyleName(
          "submit disabled",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {}
        )}
      >
        Submit
      </button>
    </div>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style With ::part() styles: With ::part() styles 1`] = `

import './index.styl'
function Test ({ style, active, submit, disabled, titleStyle }) {
  return (
    <Card style={style} styleName={['root', {active}]} titleStyle={[titleStyle, { color: 'green' }]} title='container'>
      <Content styleName='text' style={{ color: 'red' }} footerStyle={{ color: 'blue' }} center title='text' />
    </Card>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({ style, active, submit, disabled, titleStyle }) {
  return (
    <Card
      title="container"
      {..._processStyleName(
        [
          "root",
          {
            active,
          },
        ],
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: style,
          titleStyle: [
            titleStyle,
            {
              color: "green",
            },
          ],
        }
      )}
    >
      <Content
        center
        title="text"
        {..._processStyleName(
          "text",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: {
              color: "red",
            },
            footerStyle: {
              color: "blue",
            },
          }
        )}
      />
    </Card>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style dynamic part attribute. Array and Object: dynamic part attribute. Array and Object 1`] = `

import './index.styl'
const Test = ({ style, cardStyle: myCardStyle, contentStyle, title, ...props }) => {
  function render () {
    return (
      <Card
        part='card'
        style={{ color: 'blue' }}
        titleStyle={{ color: 'red' }}
      >
        <Content part={['content', { active }]} />
      </Card>
    )
  }
  return render()
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

const Test = ({
  activeStyle: _activeStyle,
  style,
  cardStyle: myCardStyle,
  contentStyle,
  title,
  ...props
}) => {
  function render() {
    return (
      <Card
        {..._processStyleName(
          "",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [
              {
                color: "blue",
              },
              myCardStyle,
            ],
            titleStyle: {
              color: "red",
            },
          }
        )}
      >
        <Content
          {..._processStyleName(
            "",
            _css,
            typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
            typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
            {
              style: [contentStyle, active ? _activeStyle : undefined],
            }
          )}
        />
      </Card>
    );
  }

  return render();
};


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style dynamic part attribute. Object: dynamic part attribute. Object 1`] = `

import './index.styl'
const Test = ({ style, cardStyle: myCardStyle, contentStyle, title, ...props }) => {
  function render () {
    return (
      <Card
        part='card'
        style={{ color: 'blue' }}
        titleStyle={{ color: 'red' }}
      >
        <Content part={{content: true, active}} />
      </Card>
    )
  }
  return render()
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

const Test = ({
  activeStyle: _activeStyle,
  style,
  cardStyle: myCardStyle,
  contentStyle,
  title,
  ...props
}) => {
  function render() {
    return (
      <Card
        {..._processStyleName(
          "",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [
              {
                color: "blue",
              },
              myCardStyle,
            ],
            titleStyle: {
              color: "red",
            },
          }
        )}
      >
        <Content
          {..._processStyleName(
            "",
            _css,
            typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
            typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
            {
              style: [
                true ? contentStyle : undefined,
                active ? _activeStyle : undefined,
              ],
            }
          )}
        />
      </Card>
    );
  }

  return render();
};


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style dynamic part attribute. Should error on unsupported dynamic key in object: dynamic part attribute. Should error on unsupported dynamic key in object 1`] = `

import './index.styl'
function Test ({ variant }) {
  return (
    <Card part={{[variant]: true}} />
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

SyntaxError: unknown: 
        'part' attribute only supports literal or string keys in object.
        Dynamic keys or spreads are not supported.
      
[0m [90m 2 |[39m [36mfunction[39m [33mTest[39m ({ variant }) {[0m
[0m [90m 3 |[39m   [36mreturn[39m ([0m
[0m[31m[1m>[22m[39m[90m 4 |[39m     [33m<[39m[33mCard[39m part[33m=[39m{{[variant][33m:[39m [36mtrue[39m}} [33m/[39m[33m>[39m[0m
[0m [90m   |[39m                  [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[0m
[0m [90m 5 |[39m   )[0m
[0m [90m 6 |[39m }[0m

`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style dynamic part attribute. Should error on unsupported dynamic value in array: dynamic part attribute. Should error on unsupported dynamic value in array 1`] = `

import './index.styl'
function Test ({ variant }) {
  return (
    <Card part={['card', variant]} />
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

SyntaxError: unknown: 
      'part' attribute only supports static strings or objects inside an array.
    
[0m [90m 2 |[39m [36mfunction[39m [33mTest[39m ({ variant }) {[0m
[0m [90m 3 |[39m   [36mreturn[39m ([0m
[0m[31m[1m>[22m[39m[90m 4 |[39m     [33m<[39m[33mCard[39m part[33m=[39m{[[32m'card'[39m[33m,[39m variant]} [33m/[39m[33m>[39m[0m
[0m [90m   |[39m                          [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[0m
[0m [90m 5 |[39m   )[0m
[0m [90m 6 |[39m }[0m

`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style dynamic part attribute. Should error on unsupported dynamic value: dynamic part attribute. Should error on unsupported dynamic value 1`] = `

import './index.styl'
function Test ({ variant }) {
  return (
    <Card part={variant} />
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

SyntaxError: unknown: 
    'part' attribute might only be the following:
      - static string
      - array (with static strings or objects)
      - object (with static keys)
    Basically the rule is that the name of the part must be static so that
    it is possible to determine at compile time which parts are being used.
  
[0m [90m 2 |[39m [36mfunction[39m [33mTest[39m ({ variant }) {[0m
[0m [90m 3 |[39m   [36mreturn[39m ([0m
[0m[31m[1m>[22m[39m[90m 4 |[39m     [33m<[39m[33mCard[39m part[33m=[39m{variant} [33m/[39m[33m>[39m[0m
[0m [90m   |[39m           [31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[31m[1m^[22m[39m[0m
[0m [90m 5 |[39m   )[0m
[0m [90m 6 |[39m }[0m

`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style magic 'root' part with existing style prop: magic 'root' part with existing style prop 1`] = `

import './index.styl'
function Test ({ title, style, ...props }) {
  return (
    <Card
      part='root'
      style={{ color: 'blue' }}
      titleStyle={{ color: 'red' }}
    >
      <Content part='content active' />
    </Card>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({
  activeStyle: _activeStyle,
  contentStyle: _contentStyle,
  title,
  style,
  ...props
}) {
  return (
    <Card
      {..._processStyleName(
        "",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: [
            {
              color: "blue",
            },
            style,
          ],
          titleStyle: {
            color: "red",
          },
        }
      )}
    >
      <Content
        {..._processStyleName(
          "",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [_contentStyle, _activeStyle],
          }
        )}
      />
    </Card>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style magic 'root' part: magic 'root' part 1`] = `

import './index.styl'
function Test ({ title, ...props }) {
  return (
    <Card
      part='root'
      style={{ color: 'blue' }}
      titleStyle={{ color: 'red' }}
    >
      <Content part='content active' />
    </Card>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({
  activeStyle: _activeStyle,
  contentStyle: _contentStyle,
  style: _style,
  title,
  ...props
}) {
  return (
    <Card
      {..._processStyleName(
        "",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: [
            {
              color: "blue",
            },
            _style,
          ],
          titleStyle: {
            color: "red",
          },
        }
      )}
    >
      <Content
        {..._processStyleName(
          "",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [_contentStyle, _activeStyle],
          }
        )}
      />
    </Card>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style part attribute. No props: part attribute. No props 1`] = `

import './index.styl'
function Test () {
  return (
    <Card
      part='card'
      style={{ color: 'blue' }}
      titleStyle={{ color: 'red' }}
    >
      <Content
        styleName='content'
        part='content active'
        style={{ fontWeight: 'bold' }}
        bodyStyle={{ color: 'blue' }}
      />
    </Card>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test(_props) {
  return (
    <Card
      {..._processStyleName(
        "",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: [
            {
              color: "blue",
            },
            _props.cardStyle,
          ],
          titleStyle: {
            color: "red",
          },
        }
      )}
    >
      <Content
        {..._processStyleName(
          "content",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [
              {
                fontWeight: "bold",
              },
              _props.contentStyle,
              _props.activeStyle,
            ],
            bodyStyle: {
              color: "blue",
            },
          }
        )}
      />
    </Card>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style part attribute. With anon function within named fn: part attribute. With anon function within named fn 1`] = `

import './index.styl'
const Test = ({ style, cardStyle: myCardStyle, contentStyle, title, ...props }) => {
  function render () {
    return (
      <Card
        part='card'
        style={{ color: 'blue' }}
        titleStyle={{ color: 'red' }}
      >
        <Content part='content active' />
      </Card>
    )
  }
  return render()
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

const Test = ({
  activeStyle: _activeStyle,
  style,
  cardStyle: myCardStyle,
  contentStyle,
  title,
  ...props
}) => {
  function render() {
    return (
      <Card
        {..._processStyleName(
          "",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [
              {
                color: "blue",
              },
              myCardStyle,
            ],
            titleStyle: {
              color: "red",
            },
          }
        )}
      >
        <Content
          {..._processStyleName(
            "",
            _css,
            typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
            typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
            {
              style: [contentStyle, _activeStyle],
            }
          )}
        />
      </Card>
    );
  }

  return render();
};


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style part attribute. With destructed props: part attribute. With destructed props 1`] = `

import './index.styl'
function Test ({ style, cardStyle, title, ...props }) {
  return (
    <Card
      part='card'
      style={{ color: 'blue' }}
      titleStyle={{ color: 'red' }}
    >
      <Content part='content active' />
    </Card>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test({
  activeStyle: _activeStyle,
  contentStyle: _contentStyle,
  style,
  cardStyle,
  title,
  ...props
}) {
  return (
    <Card
      {..._processStyleName(
        "",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: [
            {
              color: "blue",
            },
            cardStyle,
          ],
          titleStyle: {
            color: "red",
          },
        }
      )}
    >
      <Content
        {..._processStyleName(
          "",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [_contentStyle, _activeStyle],
          }
        )}
      />
    </Card>
  );
}


`;

exports[`@startupjs/babel-plugin-rn-stylename-to-style part attribute. With named props: part attribute. With named props 1`] = `

import './index.styl'
function Test (props) {
  return (
    <Card
      part='card'
      style={{ color: 'blue' }}
      titleStyle={{ color: 'red' }}
    >
      <Content part='content active' />
    </Card>
  )
}

      ↓ ↓ ↓ ↓ ↓ ↓

import _css from "./index.styl";

const _processStyleName = require("@startupjs/babel-plugin-rn-stylename-to-style/process")
  .process;

function Test(props) {
  return (
    <Card
      {..._processStyleName(
        "",
        _css,
        typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
        typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
        {
          style: [
            {
              color: "blue",
            },
            props.cardStyle,
          ],
          titleStyle: {
            color: "red",
          },
        }
      )}
    >
      <Content
        {..._processStyleName(
          "",
          _css,
          typeof __CSS_GLOBAL__ !== "undefined" && __CSS_GLOBAL__,
          typeof __CSS_LOCAL__ !== "undefined" && __CSS_LOCAL__,
          {
            style: [props.contentStyle, props.activeStyle],
          }
        )}
      />
    </Card>
  );
}


`;

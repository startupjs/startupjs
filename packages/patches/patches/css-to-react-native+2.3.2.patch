diff --git a/node_modules/css-to-react-native/index.js b/node_modules/css-to-react-native/index.js
index a2ad42f..caebb1a 100644
--- a/node_modules/css-to-react-native/index.js
+++ b/node_modules/css-to-react-native/index.js
@@ -40,6 +40,39 @@ var matchColor = function matchColor(node) {
   return null;
 };
 
+const matchVariable = node => {
+  if (
+    (node.type !== 'function' && node.value !== 'var') ||
+    node.nodes.length === 0
+  )
+    return null
+
+  const variableName = node.nodes[0].value
+
+  if (node.nodes.length === 1) {
+    return `var(${variableName})`
+  }
+
+  const defaultValues = node.nodes
+    .slice(1)
+    .filter(subnode => subnode.type !== 'div')
+    .map(subnode => {
+      if (subnode.type === 'string') {
+        return `'${matchString(subnode)}'`
+      }
+      if (subnode.type === 'function' && ['rgb', 'rgba', 'hls', 'hlsa'].includes(subnode.value)) {
+        return subnode.value + '(' + subnode.nodes.map(n => n.value).join('') + ')'
+      }
+      return subnode.value
+    })
+
+  if (defaultValues.length !== (node.nodes.length - 1) / 2) {
+    return null
+  }
+
+  return `var(${variableName}, ${defaultValues.join`, `})`
+}
+
 var noneRe = /^(none)$/i;
 var autoRe = /^(auto)$/i;
 var identRe = /(^-?[_a-z][_a-z0-9-]*$)/i;
@@ -98,7 +131,8 @@ var tokens = {
   IDENT: regExpToken(identRe),
   STRING: matchString,
   COLOR: matchColor,
-  LINE: regExpToken(/^(none|underline|line-through)$/i)
+  LINE: regExpToken(/^(none|underline|line-through)$/i),
+  VARIABLE: matchVariable
 };
 
 var NONE = tokens.NONE,
@@ -130,7 +164,7 @@ var border = function border(tokenStream) {
 
     if (borderWidth === undefined && tokenStream.matches(LENGTH) || tokenStream.matches(UNSUPPORTED_LENGTH_UNIT)) {
       borderWidth = tokenStream.lastValue;
-    } else if (borderColor === undefined && tokenStream.matches(COLOR)) {
+    } else if (borderColor === undefined && (tokenStream.matches(COLOR) || tokenStream.matches(tokens.VARIABLE))) {
       borderColor = tokenStream.lastValue;
     } else if (borderStyle === undefined && tokenStream.matches(BORDER_STYLE)) {
       borderStyle = tokenStream.lastValue;
@@ -236,7 +270,7 @@ var parseShadow = function parseShadow(tokenStream) {
       } else {
         tokenStream.rewind();
       }
-    } else if (color === undefined && tokenStream.matches(COLOR$1)) {
+    } else if (color === undefined && (tokenStream.matches(COLOR$1) || tokenStream.matches(tokens.VARIABLE))) {
       color = tokenStream.lastValue;
     } else {
       tokenStream.throw();
@@ -489,7 +523,7 @@ var textDecoration = function textDecoration(tokenStream) {
       line = lines.join(' ');
     } else if (style === undefined && tokenStream.matches(STYLE$1)) {
       style = tokenStream.lastValue;
-    } else if (color === undefined && tokenStream.matches(COLOR$2)) {
+    } else if (color === undefined && (tokenStream.matches(COLOR$2) || tokenStream.matches(tokens.VARIABLE))) {
       color = tokenStream.lastValue;
     } else {
       tokenStream.throw();
@@ -634,11 +668,11 @@ var IDENT$1 = tokens.IDENT,
 
 var background = function background(tokenStream) {
   return {
-    backgroundColor: tokenStream.expect(COLOR$3)
+    backgroundColor: tokenStream.expect(COLOR$3, tokens.VARIABLE)
   };
 };
 var borderColor = directionFactory({
-  types: [COLOR$3],
+  types: [COLOR$3, tokens.VARIABLE],
   prefix: 'border',
   suffix: 'Color'
 });
